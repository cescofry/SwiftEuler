//
//  euler1.swift
//  SwiftEuler
//
//  Created by Francesco Frison on 06/01/2015.
//  Copyright (c) 2015 Ziofrtiz. All rights reserved.
//

import Foundation

class Exercise0To10: ExerciseGroupable {
    
    var exercise0 = Exercise(description: "Exercise 0 is not implemented") { () -> (String) in
        return ""
    }

    var exercise1 = Exercise(description: "If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.") { () -> (String) in
        
        var total = 0
        for i in 0...1000 {
            if (i%3 == 0) || (i%5 == 0) {
                total += i
            }
        }
        
        return String(total)
    }
    
    var exercise2 = Exercise(description: "Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.") { () -> (String) in
        
        var fiboBuffer = [2, 1]
        var total = 2
        while fiboBuffer[0] < 4000000 {
            let newFibo = fiboBuffer[0] + fiboBuffer[1]
            fiboBuffer.insert(newFibo, atIndex: 0)
            if (newFibo%2 == 0) {
                total += newFibo
            }
        }
        
        return String(total)
    }

    var exercise3 = Exercise(description: "The prime factors of 13195 are 5, 7, 13 and 29. What is the largest prime factor of the number 600851475143 ?") { () -> (String) in
        var input = 600851475143
        var primeFactor = 1
        var result = 0;
        while input > 1 {
            
            primeFactor++
            if (input%primeFactor == 0) {
                println("\(input) / \(primeFactor)")
                input /= primeFactor
                result = primeFactor
                
            }
            
        }
        
        return String(primeFactor)
    }
    
    var exercise4 = Exercise(description: "A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 Ã— 99. Find the largest palindrome made from the product of two 3-digit numbers.") { () -> (String) in
    
        
        func isPalindromic(number : Int) -> Bool {
            let stringProd = String(number)
            let reverseProd = String(reverse(stringProd))
            
            return (stringProd == reverseProd)
        }
        
        var result = 0
        
        for i in 1...999 {
            for j in (i - 1)...999 {
                let product = i * j
                
                if (isPalindromic(product) && result < product) {
                    println("\(product) = \(i) x \(j)")
                    result = product
                }
            }
        }
        
        return String(result)
    }
    
    var exercise5 = Exercise(description: "2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder. What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?") { () -> (String) in
        
        
        func isDivisible(number : Int, until: Int) -> Bool {
            for i in reverse(1...until) {
                if (number%i != 0) {
                    return false
                }
            }
            
            return true
        }
        
        var result = 20
        var dividedByAll = false
        
        while !dividedByAll {
            
            if (isDivisible(result, 20)) {
                dividedByAll = true
            }
            result +=  (20 * 19) - (result%20)
        }
        
        
        return String(result)
    }
    
    var exercise6 = Exercise(description: "") { () -> (String) in
        return ""
    }
    
    var exercise7 = Exercise(description: "") { () -> (String) in
        return ""
    }
    
    var exercise8 = Exercise(description: "") { () -> (String) in
        return ""
    }
    
    var exercise9 = Exercise(description: "") { () -> (String) in
        return ""
    }
    
}
