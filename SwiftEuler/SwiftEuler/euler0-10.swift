//
//  euler1.swift
//  SwiftEuler
//
//  Created by Francesco Frison on 06/01/2015.
//  Copyright (c) 2015 Ziofrtiz. All rights reserved.
//

import Foundation

class Exercise0To10: ExerciseGroupable {
    
    var exercise0 = Exercise(description: "Exercise 0 is not implemented") { () -> (String) in
        return ""
    }

    var exercise1 = Exercise(description: "If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23. Find the sum of all the multiples of 3 or 5 below 1000.") { () -> (String) in
        
        var total = 0
        for i in 0...1000 {
            if (i%3 == 0) || (i%5 == 0) {
                total += i
            }
        }
        
        return String(total)
    }
    
    var exercise2 = Exercise(description: "Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ... By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.") { () -> (String) in
        
        var fiboBuffer = [2, 1]
        var total = 2
        while fiboBuffer[0] < 4000000 {
            let newFibo = fiboBuffer[0] + fiboBuffer[1]
            fiboBuffer.insert(newFibo, atIndex: 0)
            if (newFibo%2 == 0) {
                total += newFibo
            }
        }
        
        return String(total)
    }

    var exercise3 = Exercise(description: "The prime factors of 13195 are 5, 7, 13 and 29. What is the largest prime factor of the number 600851475143 ?") { () -> (String) in
        var input = 600851475143
        var primeFactor = 1
        var result = 0;
        while input > 1 {
            
            primeFactor++
            if (input%primeFactor == 0) {
                println("\(input) / \(primeFactor)")
                input /= primeFactor
                result = primeFactor
                
            }
            
        }
        
        return String(primeFactor)
    }
    
    var exercise4 = Exercise(description: "A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99. Find the largest palindrome made from the product of two 3-digit numbers.") { () -> (String) in
    
        
        func isPalindromic(number : Int) -> Bool {
            let stringProd = String(number)
            let reverseProd = String(reverse(stringProd))
            
            return (stringProd == reverseProd)
        }
        
        var result = 0
        
        for i in 1...999 {
            for j in (i - 1)...999 {
                let product = i * j
                
                if (isPalindromic(product) && result < product) {
                    println("\(product) = \(i) x \(j)")
                    result = product
                }
            }
        }
        
        return String(result)
    }
    
    var exercise5 = Exercise(description: "2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder. What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?") { () -> (String) in
        
        
        func isDivisible(number : Int, until: Int) -> Bool {
            for i in reverse(1...until) {
                if (number%i != 0) {
                    return false
                }
            }
            
            return true
        }
        
        var result = 20
        var dividedByAll = false
        
        while !dividedByAll {
            
            if (isDivisible(result, 20)) {
                dividedByAll = true
            }
            result +=  (20 * 19) - (result%20)
        }
        
        
        return String(result)
    }
    
    var exercise6 = Exercise(description: "The sum of the squares of the first ten natural numbers is, 12 + 22 + ... + 102 = 385. The square of the sum of the first ten natural numbers is, (1 + 2 + ... + 10)2 = 552 = 3025 Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640. Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.") { () -> (String) in
        
        var sumOfSquares = 0;
        var squareOfSums = 0;
        
        for i in 1...100 {
            sumOfSquares += i * i
            squareOfSums += i
        }
        
        squareOfSums *= squareOfSums
        
        return String(squareOfSums - sumOfSquares)
    }
    
    var exercise7 = Exercise(description: "By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13. What is the 10 001st prime number?") { () -> (String) in
        
        
        var primes = Primes()
        
        var number = 0
        for i in 0...10000 {
            number = primes.next()!
        }
        
        return String(number)
    }
    
    var exercise8 = Exercise(description: "The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832. Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?") { () -> (String) in
        
        let input = Array( "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450" )
        
        let limit = input.count - 13
        var index = 0
        var result = 0
        while index < limit {
            var tot = 1
            for subIndex in index...(index+12) {
                let num = String(input[subIndex]).toInt()!
                if (num == 0) {
                    index++
                    tot = 0
                    break
                }
                tot *= num
            }
            
            if (tot > result) {
                println(tot)
                result = tot
            }
            
            index++
        }
        
        
        
        return String(result);
    }
    
    var exercise9 = Exercise(description: "A Pythagorean triplet is a set of three natural numbers, a < b < c, for which, a2 + b2 = c2 For example, 32 + 42 = 9 + 16 = 25 = 52. There exists exactly one Pythagorean triplet for which a + b + c = 1000. Find the product abc.") { () -> (String) in
        
        func isTriplet(#a: Int, b: Int, c: Int) -> Bool {
            return (a * a) + (b * b) == (c * c)
        }
        
        
        var a = 1
        var b = 1
        var c = 1
        
        let limit = 500
        
        for a in 1...limit {
            for b in a...limit {
                for c in b...limit {
                    if isTriplet(a: a, b, c) && a + b + c == 1000 {
                        println("\(a)  \(b) \(c)")
                        return String(a * b * c)
                    }
                }
            }
        }
        
        return ""
    }
    
}

struct Primes : GeneratorType {
    
    typealias Element = Int
    
    var primes : [Int] = Array()
    
    mutating func next() -> Element? {
        
        if primes.count == 0 {
            primes.append(2)
            return 2
        }
        
        var next = primes.last!
        
        while true {
            next++
            var isPrime = true
            let limit = Int(sqrt(Float(next)))
            
            for divider in primes {
                if (divider > limit) {
                    break
                }
                isPrime = (next%divider != 0)
                if !isPrime {
                    break
                }
            }
            
            if isPrime {
                primes.append(next)
                return next
            }
        }
    }
}
